definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginInput:
    properties:
      email:
        default: user@example.com
        example: test@example.com
        type: string
      password:
        default: "123456"
        example: password123
        type: string
    type: object
  models.RegisterInput:
    properties:
      email:
        default: user@example.com
        example: user@example.com
        type: string
      password:
        default: "123456"
        example: "123456"
        type: string
      username:
        default: testuser
        example: testuser
        type: string
    type: object
  models.ResponseMessage:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
  title: E-commerce API
  version: "1.0"
paths:
  /cart:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseMessage'
            type: array
      security:
      - BearerAuth: []
      summary: View cart
      tags:
      - cart
  /cart/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: Product ID and Quantity
        in: body
        name: data
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - cart
  /cart/remove:
    delete:
      parameters:
      - description: Cart ID
        in: query
        name: cart_id
        required: true
        type: integer
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - cart
  /cart/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: Cart ID and Quantity
        in: body
        name: data
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update cart item
      tags:
      - cart
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token for authentication
      parameters:
      - description: User Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /orders:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseMessage'
            type: array
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - orders
  /orders/{id}:
    get:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseMessage'
            type: array
      security:
      - BearerAuth: []
      summary: Get order details
      tags:
      - orders
  /orders/place:
    post:
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Place an order
      tags:
      - orders
  /products:
    get:
      description: Get a list of all available products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete an existing product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      description: Get details of a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a single product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update the details of an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update product details
      tags:
      - products
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with a username, email, and password
      parameters:
      - description: User Registration Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /user/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the authenticated user's profile using JWT token
      produces:
      - application/json
      responses:
        "200":
          description: User profile data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
